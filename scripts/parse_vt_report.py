import json
from pprint import pprint
from collections import Counter
import string
import re
import operator


def normalize(input):
    output = re.sub('adware','Adware',input,flags=re.I)
    output = re.sub('backdoor','Backdoor',output,flags=re.I)
    output = re.sub('worm','Worm',output,flags=re.I)
    output = re.sub('trojan','Trojan',output,flags=re.I)
    output = re.sub('hacktool','HackTool',output,flags=re.I)
    output = re.sub('(PUA\.|PUP\.)','Adware:',output)
    output = re.sub('\[.*\]','',output)
    output = output.replace('I-Worm.','Worm:').replace('W32','Win32').replace('BehavesLike.','')
    output = output.replace('-gen','/Generic')
    output = output.replace('Win32:','Win32/')
    output = output.replace('PE.','').replace('PE:','').replace('PE_','')
    output = output.replace('Adware/','Adware:').replace('Adware.','Adware:').replace('Adware ','Adware:')
    output = output.replace('Virus/','Virus:').replace('Virus.','Virus:')
    output = output.replace('Worm/','Worm:').replace('Worm.','Worm:').replace('Worm_','Worm:')
    output = output.replace('Trojan/','Trojan:').replace('Trojan.','Trojan:')
    output = output.replace('-Clicker/','Clicker:')
    output = output.replace('Trj/','Trojan:')
    output = output.replace('Backdoor/','Backdoor:').replace('Backdoor.','Backdoor:')
    output = output.replace('Email-Worm','Worm')
    output = output.replace('EmailWorm','Worm')
    output = output.replace('Win32/Adware:','Adware:Win32/')
    output = output.replace('Win32/Trojan:','Trojan:Win32/')
    output = output.replace('Win32/Virus:','Virus:Win32/')
    output = output.replace('Win32/Backdoor:','Backdoor:Win32/')
    output = output.replace('Win32.','Win32/')
    output = output.replace('not-a-virus:','')
    output = output.replace('a variant of ','')
    if re.match("\.Worm'", output):
        output = output.replace(".Worm","").replace(" \'","Worm:")
    if re.match("\.Trojan'", output):
        output = output.replace(".Trojan","").replace(" \'","Trojan:")
    output = output.replace(':.',':')
    return output

def score(input):
    av_scores = {"ALYac": .5, "Ad-Aware": .5, "AegisLab": .1, "Agnitum": .5, "AhnLab-V3": .5, \
               "Alibaba": .1, "Antiy-AVL": .5, "Arcabit": .5, "Avast": .5, "AVG": .5, \
               "Avira": .5, "AVware": .5, "Baidu-International": .2, "BitDefender": .5, "Bkav": .5, \
               "ByteHero": .2, "CAT-QuickHeal": .5, "ClamAV": .4, "CMC": .4, "Comodo": .5, \
               "Cyren": .5, "DrWeb": .5, "Emsisoft": .5, "ESET-NOD32": .7, "Fortinet": .5, \
               "F-Prot": .5, "F-Secure": .5, "GData": .7, "Ikarus": .8, "Jiangmin": .4, \
               "K7AntiVirus": .6, "K7GW": .6, "Kaspersky": .5, "Kingsoft": .5, "Malwarebytes": .8, \
               "McAfee": .5, "McAfee-GW-Edition": .5, "Microsoft": .9, "MicroWorld-eScan": .5, \
               "NANO-Antivirus": .7, "nProtect": .5, "Panda": .5, "Qihoo-360": .2, "Rising": .5, \
               "Sophos": .5, "SUPERAntiSpyware": .3, "Symantec": .5, "Tencent": .2, "TheHacker": .3, \
               "TotalDefense": .5, "TrendMicro": .5, "TrendMicro-HouseCall": .5, "VBA32": .5, \
               "VIPRE": .5, "ViRobot": .5, "Zillya": .5, "Zoner": .2 \
              }
    weight = av_scores.get(input,.5)
    return weight

def evaluate(parsed):
    count_all = Counter()
    results = dict()
    for x in parsed['scans']:
      if parsed['scans'][x]['detected'] == True:
        temp_result = normalize(str(parsed['scans'][x]['result'].encode('UTF8'))),float(score(x.encode('UTF8')))
        result = re.split(':|\/|\.',str(temp_result[0]))
        for name in result:
          current_value = results.get(name,0)
          results[name] = current_value + temp_result[1]
        #results.append(temp_result)
    results.pop("Win32",None)
    sorted_values = sorted(results.items(),key=operator.itemgetter(1), reverse=True)
    print(len(sorted_values))
    if len(sorted_values) == 0:
        print("Potential Cleanware")
    elif len(sorted_values) == 1:
        print 'Best Guess: ', sorted_values[0][0]
        print 'Confidence: ', float(sorted_values[0][1])/float(parsed['positives']) * 100,"%"
    else:
        print 'Best Guess: ', sorted_values[0][0]
        print 'Confidence: ', float(sorted_values[0][1])/float(parsed['positives']) * 100,"%"
        print 'Second Best: ', sorted_values[1][0]
        print 'Confidence: ', float(sorted_values[1][1])/float(parsed['positives']) * 100,"%"
#VirusShare_00000.ldjson
with open("VirusShare_00000.ldjson","r") as file:
    table = [json.loads(line) for line in file]
    for row in table:
        #print(row)
        #print(json.dumps(row, indent=4, sort_keys=True))
        evaluate(row)
