import numpy as np
import json
from ml_helpers import ml_helpers
from redis_management import RedisManagement as rmgt
from collections import OrderedDict
from sklearn.cluster import KMeans


import matplotlib.pyplot as plt
from collections import Counter
import matplotlib as mpl
mpl.rcParams['font.size'] = 50.0


#help(KMeans)
mat = np.load('matrix_first_vector.npy')
redis_h = rmgt('malwares')
ml_h = ml_helpers(redis_h.redis_client)
#print(mat.shape)



KMeans = KMeans(n_clusters=90,n_jobs=8,precompute_distances=False)
KMeansResult = KMeans.fit(mat)

print(KMeansResult.labels_)
y_kmeans = KMeans.predict(mat)


centers = KMeans.cluster_centers_

plt.scatter(mat[:, 0], mat[:, 1],c=y_kmeans,s=50, cmap='viridis')
plt.scatter(centers[:, 0], centers[:, 1], c='black', s=10, alpha=0.5);



#print(KMeans.labels_)
#print(KMeans.cluster_centers_)
labels = KMeansResult.labels_.tolist()
#print(labels)

AllMalwares = ml_h.get_all_malwares
#print(AllMalwares)
for index,l in enumerate(labels):
    ml_h.set_label(AllMalwares[index],'KMeans','first_vector',l)

distribution = {}
for malware in AllMalwares:
    try:
        distribution[redis_h.client.hget(malware,'KMeans_first_vector')].append((malware,redis_h.client.hget(malware,'label')))
    except KeyError:
        distribution[redis_h.client.hget(malware,'KMeans_first_vector')] = [(malware,redis_h.client.hget(malware,'label'))]

#print(distribution)
#for elem in distribution:
#    print(elem)




# Affichage des resultats
distrib_class_malware = {int(k):len(v) for k,v in distribution.items()}
#print(distrib_class_malware)


labels = [ str(k) for k,v in distrib_class_malware.items() if v > 10 ]

labels.append('others')
explode=[ 0 for i in range(0,len(labels))]
explode[len(labels)-1] = 0.8
fig1, ax1 = plt.subplots()

rest = sum([ v for v in distrib_class_malware.values() if v < 10])
data = [ v for v in distrib_class_malware.values() if v > 10]
data.append(rest)

ax1.pie(data ,labels=labels, autopct='%1.1f%%',
        shadow=True, startangle=100, rotatelabels =True, explode=explode)
ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

plt.show()

#histo = Counter( malware_fam for m,malware_fam in distribution[b'0'])
#print(histo)
