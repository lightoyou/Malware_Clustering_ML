import numpy as np
import json
from ml_helpers import ml_helpers
from redis_management import RedisManagement as rmgt
from collections import OrderedDict
from sklearn.cluster import KMeans

mat = np.load('matrix_first_vector.npy')
redis_h = rmgt('malwares')
ml_h = ml_helpers(redis_h.redis_client)
#print(mat.shape)

KMeans = KMeans(n_clusters=15,n_jobs=8,precompute_distances=False)
KMeansResult = KMeans.fit(mat)


#print(KMeans.labels_)
#print(KMeans.cluster_centers_)
labels = KMeansResult.labels_.tolist()
#print(labels)

AllMalwares = ml_h.get_all_malwares
#print(AllMalwares)
for index,l in enumerate(labels):
    ml_h.set_label(AllMalwares[index],'KMeans','first_vector',l)

distribution = {}
for malware in AllMalwares:
    try:
        distribution[redis_h.client.hget(malware,'KMeans_first_vector')].append((malware,redis_h.client.hget(malware,'label')))
    except KeyError:
        distribution[redis_h.client.hget(malware,'KMeans_first_vector')] = [(malware,redis_h.client.hget(malware,'label'))]

print(distribution)
for elem in distribution:
    print(elem)
