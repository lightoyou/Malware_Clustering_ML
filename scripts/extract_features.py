import glob
import json
from redis_management import RedisManagement
from collections import OrderedDict
from ml_helpers import ml_helpers
import numpy as np

PathDataset = "/home/light/Documents/Cours_CDSI/ML/dataset/theZoo/malwares/Binaries/"

rmgt = RedisManagement('malwares')

features = ["size_of_file","number_of_sections","median_of_entropy","nb_of_imports","number of exports"]

AllJSONFiles = [ json.load(open(path))for path in glob.glob('jsonfiles/*')]

for j in AllJSONFiles:
    malware = OrderedDict()
    malware[features[0]] = j['size']
    malware[features[1]] = int(j['nb_sections'])
    malware[features[2]] = sum(sec['entropy'] for sec in j['sections']) / j['nb_sections']
    malware[features[3]] = sum(len(v) for v in j['exported_fonctions'])
    malware[features[4]] = sum(len(v) for v in j['imported_fonctions'])
    rmgt.record_vector(j['hashes']['sha256'],'first_vector',malware)
    rmgt.record_malware_label(j['hashes']['sha256'],j['path'],PathDataset)

ml_h = ml_helpers(rmgt.redis_client)
mat = ml_h.create_matrix('first_vector')
print(mat.shape)
np.save('matrix_first_vector', mat)

'''
#second vector
all_vectors = [eval(rmgt.client.hget(k,'first_vector')) for k in sorted(rmgt.client.keys())]
#print(all_vectors)
all_malware=ml_h.get_all_malwares

max_values  = ml_h.get_max_values(all_vectors,features)

list_second_vector = [OrderedDict((k, v / max_values[k]) for k,v in m.items()) for m in all_vectors]

for index,v in enumerate(list_second_vector):
    rmgt.record_vector(all_malware[index],'second_vector',v)
mat_second_vect = ml_h.create_matrix('second_vector')
np.save('matrix_second_vector',mat_second_vect)
'''
