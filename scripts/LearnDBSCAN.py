import numpy as np
from ml_helpers import ml_helpers
from redis_management import RedisManagement as rmgt
from collections import OrderedDict


import matplotlib.pyplot as plt
from collections import Counter
import matplotlib as mpl

from sklearn.cluster import DBSCAN

mat =  np.load('matrix_first_vector.npy')
redis_h = rmgt('malwares')
ml_h= ml_helpers(redis_h.redis_client)

db = DBSCAN(eps=0.001,min_samples=1, metric="euclidean",n_jobs=8)
db = db .fit(mat)
labels = db.labels_

# Number of clusters in labels, ignoring noise if present.
n_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)
print(n_clusters_)

all_malwares  = ml_h.get_all_malwares
for index,l in enumerate(labels):
    ml_h.set_label(all_malwares[index],'DBscan','first_vector',l)

distrib = {}
for m in all_malwares:
    try:
        distrib[redis_h.client.hget(m,'DBscan_first_vector')].append((m,redis_h.client.hget(m,'label')))
    except KeyError:
        distrib[redis_h.client.hget(m,'DBscan_first_vector')] = [(m,redis_h.client.hget(m,'label'))]



# Print results

mpl.rcParams['font.size'] = 50.0

distrib_class_malware = { int(k):len(v) for k,v in distrib.items()}

labels = [ str(k) for k,v in distrib_class_malware.items() if v > 10 ]

labels.append('others')
explode=[ 0 for i in range(0,len(labels))]
explode[len(labels)-1] = 0.8
fig1, ax1 = plt.subplots()

rest = sum([ v for v in distrib_class_malware.values() if v < 10])
data = [ v for v in distrib_class_malware.values() if v > 10]
data.append(rest)

ax1.pie(data ,labels=labels, autopct='%1.1f%%',
        shadow=True, startangle=100, rotatelabels =True, explode=explode)
ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

print(distrib[b'29'])
plt.show()
